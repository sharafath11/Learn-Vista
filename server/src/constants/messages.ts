export const Messages = {
  AUTH: {
    LOGIN_SUCCESS: "Login successful.",
    LOGOUT_SUCCESS: "Logout successful.",
    MISSING_CREDENTIALS: "Email and password are required.",
    VERIFICATION_SUCCESS: "Verification successful.",
    OTP_SENT: "OTP sent successfully.",
    FORGOT_PASSWORD_SUCCESS: "Password reset email sent if account exists.",
    PASSWORD_RESET_SUCCESS: "Password reset successfully.",
    CHANGE_PASSWORD: "Password changed successfully.",
    WEAK_PASSWORD:
      "Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.",
    INVALID_TOKEN: "Invalid or expired token.",
    REGISTRATION_SUCCESS: "User registration successful.",
    GOOGLE_AUTH_SUCCESS: "Google authentication successful.",
    MISSING_EMAIL: "Email is required.",
    MISSING_EMAIL_OTP: "Email and OTP are required.",
    MISSING_LOGIN_DATA: "Provide email/password or Google ID.",
    MISSING_BODY: "Request body is missing.",
  },
    USERS: {
        FETCHED: "Users fetched successfully.",
        BLOCK_STATUS_UPDATED: "User status updated successfully.",
        MISSING_BLOCK_DATA: "User ID and valid status (boolean) are required.",
        MISSING_USER_ID: "User ID is required.",
        MISSING_TOKEN_PASSWORD: "Token and password are required.",
        USER_NOT_FOUND: "User not found.",
        FETCHED_SUCCESSFULLY: "User retrieved successfully.",
        INVALID_QUESTION_NUMBER: "Invalid question number.",
        DAILY_TASKS_GENERATED: "Daily tasks generated.",
        TASK_UPDATED: "Task updated.",
        ALL_DAILY_TASKS_FETCHED: "Fetched all daily tasks.",
    },
  CERTIFICATES: {
    FETCHED: "Certificates fetched successfully.",
    REVOKED: "Certificate revoked successfully.",
    UNREVOKED: "Certificate unrevoked successfully.",
    MISSING_DATA: "Certificate ID and revocation status are required.",
    CERTIFICATE_NOT_FOUND: "Certificate not found.",
    INVALID_STATUS: (status: string) => `Invalid status '${status}' provided. Defaulting to 'all'.`,
  },
  CATEGORY: {
    CREATED: "Category added successfully.",
    UPDATED: "Category updated successfully.",
    FETCHED: "Categories fetched successfully.",
    RETRIEVED: "Categories retrieved successfully.",
    STATUS_UPDATED: "Category status updated successfully.",
    MISSING_FIELDS: "Missing required category fields.",
    VALIDATION_ERROR: "Category validation failed.",
  },
  CONCERN: {
    FETCHED: "Concerns fetched successfully.",
    STATUS_UPDATED: "Concern status updated successfully.",
    INVALID_STATUS: "Invalid concern status provided.",
    INVALID_RESOLUTION: "Resolution must be at least 10 characters.",
    RAISED: "Concern raised successfully.",
  },
  COURSE: {
    CREATED: "Course created successfully.",
    UPDATED: "Course edited successfully.",
    STATUS_UPDATED: "Course status updated successfully.",
    RETRIEVED: "Courses retrieved successfully.",
    FETCHED: "Course fetched successfully.",
    LESSONS_FETCHED: "Lessons fetched successfully.",
    MISSING_ID: "Missing courseId.",
    THUMBNAIL_REQUIRED: "Thumbnail image is required.",
    PUBLISHED: "Course published successfully.",
    UPDATED_WITH_USER: "Course updated with user successfully.",
    PROGRESS_FETCHED: "Progress fetched successfully.",
  },
  COMMON: {
    INTERNAL_ERROR: "Something went wrong. Please try again later.",
    MISSING_FIELDS: "Required fields are missing.",
    UNAUTHORIZED: "Unauthorized access.",
    ACCESS_DENIED:
      "Access denied. You do not have permission to perform this action.",
  },
  MENTOR: {
    CREATED: "Mentor created successfully.",
    FETCHED: "Mentor fetched successfully.",
    NOT_FOUND: "Mentor not found.",
    ID_REQUIRED: "Mentor ID is required.",
    STATUS_UPDATED: (status: string) => `Mentor status changed to ${status}`,
    BLOCK_UPDATED: (name: string, isBlocked: boolean) =>
      `${name} ${isBlocked ? "Blocked" : "Unblocked"} successfully`,
    BLOCK_FAILED: "Something went wrong while updating mentor status.",
    CHANGE_STATUS_MISSING: "mentorId, status, and email are required.",
  },
  LESSONS: {
    FETCHED: "Lessons fetched successfully.",
    ADDED: "Lesson added successfully.",
    UPDATED: "Lesson updated successfully.",
    VIDEO_URL_SIGNED: "Signed video URL generated successfully.",
    FILE_DELETED: "File deleted successfully.",
    SIGNED_URL_GENERATED: "Signed video view URL generated.",
    UPLOAD_URL_FAILED: "Upload URL generation failed.",
    AWS_CONFIG_ERROR:
      "Server configuration error: AWS credentials or bucket name missing.",
    MISSING_FIELDS: "Title, video URL, and course ID are required.",
      INVALID_ID: "Lesson ID is required for update.",
       FETCHED_SUCCESSFULLY: "Lesson details fetched successfully.",
    REPORT_SUBMITTED: "Report submitted successfully.",
    COMMENT_ADDED: "Commented successfully.",
    PROGRESS_UPDATED: "Lesson progress updated.",
    INVALID_VIDEO_DURATION: "Invalid videoTotalDuration",
    INVALID_VIDEO_WATCHED_DURATION: "Invalid videoWatchedDuration",
    VIDEO_TOTAL_DURATION_REQUIRED: "videoTotalDuration is required when updating video progress",
  },
  QUESTIONS: {
    FETCHED: "Questions fetched successfully.",
    ADDED: "Question added successfully.",
    UPDATED: "Question updated successfully.",
    GENERATE_OPTIONS_SUCCESS: "Options generated successfully.",
    GENERATE_OPTIONS_FAILED: "Failed to generate options.",
    INVALID_QUESTION_ID: "Question ID is required.",
  },
  COMMENT: {
    FETCHED: "Comments fetched successfully.",
    MISSING_MENTOR: "Mentor authentication failed.",
    INVALID_COURSE: "Invalid course ID provided.",
  },
  DONATION: {
    FETCHED: "Donations fetched successfully.",
      FILTERED_FETCHED: "Filtered donations fetched successfully.",
        INVALID_AMOUNT: "Invalid amount provided. Amount must be a positive number.",
    INVALID_CURRENCY: "Invalid currency provided. Currency must be a 3-letter code.",
    CHECKOUT_SESSION_CREATED: "Checkout session created successfully.",
    MISSING_SESSION_ID: "Missing session_id.",
    VERIFIED: "Donation verified.",
    INVALID_PAGE: "Invalid page number.",
  },
  GENAI: {
    GENERATE_OPTIONS_SUCCESS: "Options generated successfully using Gemini.",
    GENERATE_OPTIONS_FAILED: "Failed to generate options using Gemini.",
    PROMPT_INVALID: "Provided question is invalid or incomplete for Gemini.",
  },
  STREAM: {
    START_SUCCESS: "Live session started.",
    END_SUCCESS: "Live session ended.",
    MISSING_STREAM_DATA: "Missing courseId or token.",
      MISSING_LIVE_ID: "Missing LiveId or token.",
            INVALID_USER: "Invalid User.",
        JOINED_SUCCESS: "User joined successfully.",
    },
  STUDENTS: {
    FETCHED: "Student data fetched successfully.",
    STATUS_UPDATED_BLOCKED: "Student Blocked successfully.",
    STATUS_UPDATED_UNBLOCKED: "Student Unblocked successfully.",
    INVALID_REQUEST: "Invalid request.",
    },
  NOTIFICATIONS: {
    CREATED: "Notification created successfully.",
    FETCHED: "Notifications fetched successfully.",
    MARKED_AS_READ: "Notification marked as read.",
    MARKED_ALL_AS_READ: (count: number) => `Marked ${count} notifications as read.`,
    },
    SHARED: {
    KEY_NOT_FOUND: "Key not found.",
    SIGNED_URL_FETCHED: "Signed URL fetched successfully.",
    INVALID_TOKEN: "Invalid refresh token.",
    TOKENS_REFRESHED: "Tokens refreshed successfully.",
    AI_RESPONSE_FETCHED: "AI response fetched successfully.",
    },
        PROFILE: {
      NO_FILE_UPLOADED: "No file uploaded.",
      INVALID_EXPERTISE_FORMAT: "Invalid expertise format.",
      INVALID_SOCIAL_LINKS_FORMAT: "Invalid socialLinks format.",
      APPLICATION_SUBMITTED: "Application submitted successfully.",
      USERNAME_TOO_SHORT: "Username must be at least 6 characters long.",
      PROFILE_UPDATED: "Profile updated successfully.",
      USER_NOT_FOUND: "User not found.",
    },
};
